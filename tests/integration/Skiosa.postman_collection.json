{
	"info": {
		"_postman_id": "bfed57be-12a1-4a0e-a1dd-83d3bf86a75a",
		"name": "Skiosa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic Information",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.message).equal(\"Welcome to the Skiosa Core-Service!\");\r",
									"    pm.expect(data.status).equal(\"/status\");\r",
									"    pm.expect(data.git).equal(\"https://github.com/skiosa/core-service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-url}}",
							"host": [
								"{{api-url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.message).equal(\"no endpoint found\");\r",
									"    pm.expect(data.status).equal(\"404\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-url}}/abc",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"abc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Article",
			"item": [
				{
					"name": "GET  - All Articles - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.articles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.articles[2]).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  articles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt  \r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Author Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.articles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.articles[id_array].author).to.exist;\r",
									"    pm.expect(data.data.articles[2]).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  articles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    author {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.articles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.articles[id_array].categories).to.exist;\r",
									"    pm.expect(data.data.articles[2]).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  articles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - All Articles - Category Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"var id_array = pm.environment.get(\"article-id\") - 1;",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");",
									"    pm.expect(data.data.articles[id_array].content).to.exist;",
									"    pm.expect(data.data.articles[id_array].categories).to.exist;",
									"    pm.expect(data.data.articles[id_array].categoryCount).equal(2);",
									"    pm.expect(data.data.articles[2]).to.exist;",
									"});",
									"",
									"pm.test(\"Correct Date\", function(){",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\n  articles{\n    id\n    title\n    description\n    content\n    url\n    publishedAt\n    categories {\n        id\n        name\n    }\n    categoryCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.articles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"\r",
									"    pm.expect(data.data.articles[id_array].feed).to.exist;\r",
									"\r",
									"    pm.expect(data.data.articles[2]).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  articles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - All Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.articles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.articles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.articles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.articles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"\r",
									"    pm.expect(data.data.articles[id_array].author).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].categories).to.exist;\r",
									"    pm.expect(data.data.articles[id_array].feed).to.exist;\r",
									"\r",
									"    pm.expect(data.data.articles[2]).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.articles[id_array].publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  articles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    author {\r\n        id\r\n        name\r\n    }\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n        feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.article.content).to.exist;\r",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.article.publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  article(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Author Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.article.content).to.exist;\r",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.article.author).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.article.publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  article(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    author {\r\n      id\r\n      name      \r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.article.content).to.exist;\r",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.article.categories).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.article.publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  article(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Articles - Category Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");",
									"    pm.expect(data.data.article.content).to.exist;",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");",
									"    pm.expect(data.data.article.categories).to.exist;",
									"    pm.expect(data.data.article.categoryCount).equal(2);",
									"});",
									"",
									"pm.test(\"Correct Date\", function(){",
									"    let publishedDate = new Date(data.data.article.publishedAt);",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\n  article(id: $id){\n    id\n    title\n    description\n    content\n    url\n    publishedAt\n    categories {\n        id\n        name\n    }\n    categoryCount\n  }\n}\n",
								"variables": "{\n    \"id\": {{article-id}}\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.article.content).to.exist;\r",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.article.feed).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.article.publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  article(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - All Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.article.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.article.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.article.content).to.exist;\r",
									"    pm.expect(data.data.article.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.article.author).to.exist;\r",
									"    pm.expect(data.data.article.categories).to.exist;\r",
									"    pm.expect(data.data.article.feed).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Correct Date\", function(){\r",
									"    let publishedDate = new Date(data.data.article.publishedAt);\r",
									"    pm.expect(publishedDate.getFullYear()).equal(2022); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  article(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    publishedAt\r\n    author {\r\n        id\r\n        name\r\n    }\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - All Articles - Like Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"var id_array = pm.environment.get(\"article-id\") - 1;",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.articles[id_array].likeCount).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\n  articles{\n    likeCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Single Article - Like Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.article.likeCount).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\n  article(id: $id){\n    likeCount\n  }\n}",
								"variables": "{\n    \"id\": {{article-id}}\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - All Articles - Bookmark Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"var id_array = pm.environment.get(\"article-id\") - 1;",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.articles[id_array].bookmarkCount).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\n  articles{\n    bookmarkCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Single Article - Bookmark Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.article.bookmarkCount).to.exist;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\n  article(id: $id){\n    bookmarkCount\n  }\n}",
								"variables": "{\n    \"id\": {{article-id}}\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feed",
			"item": [
				{
					"name": "GET  - Single Feed - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.link).equal(\"https://asciiflix.de\");\r",
									"    pm.expect(data.data.feed.ttl).equal(\"3600\");\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.description).equal(\" A cheap and data-saving YouTube alternative for poor People with Bad Internet Connections\");\r",
									"    pm.expect(data.data.feed.lastPolledAt).equal(new Date('1970-01-01').toISOString())\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feed ($id: Float!){ \r\n  feed(id: $id){\r\n      id\r\n      link\r\n      ttl\r\n      name\r\n      description\r\n      lastPolledAt\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Feeds - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feeds[id_array].link).equal(\"https://asciiflix.de\");\r",
									"    pm.expect(data.data.feeds[id_array].ttl).equal(\"3600\");\r",
									"    pm.expect(data.data.feeds[id_array].name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feeds[id_array].description).equal(\" A cheap and data-saving YouTube alternative for poor People with Bad Internet Connections\");\r",
									"    pm.expect(data.data.feeds[id_array].lastPolledAt).equal(new Date('1970-01-01').toISOString())\r",
									"    pm.expect(data.data.feeds[1]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feeds{\r\n  feeds{\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    lastPolledAt          \r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Catagories from single Feed - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.categories[0].id).equal(2);\r",
									"    pm.expect(data.data.feed.categories[0].name).equal(\"Technology\");\r",
									"    pm.expect(data.data.feed.lastPolledAt).equal(new Date('1970-01-01').toISOString())\r",
									"    pm.expect(data.data.feed.categories[1]).to.exist;\r",
									"    pm.expect(data.data.feed.categories[0]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feed ($id: Float!){ \r\n  feed(id: $id){\r\n      id\r\n      link\r\n      ttl\r\n      name\r\n      description\r\n      lastPolledAt\r\n      categories{\r\n        id\r\n        name\r\n      }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Catagories from all Feed - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feeds[0].categories[0].id).equal(2);\r",
									"    pm.expect(data.data.feeds[0].categories[0].name).equal(\"Technology\");\r",
									"    pm.expect(data.data.feeds[0].categories[1]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].categories[0]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].categories[1]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query categoriesFromFeed{\r\n  feeds{\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    lastPolledAt\r\n    categories{\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles  from single Feed -  Article Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.articles[0].id).equal(1);\r",
									"    pm.expect(data.data.feed.articles[0].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.feed.articles[0].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.feed.articles[0].content).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use it by the way. And it worked!\");\r",
									"    pm.expect(data.data.feed.articles[0].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.feed.articles[1]).to.exist;\r",
									"    pm.expect(data.data.feed.articles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articlesFromFeed ($id: Float!){ \r\n  feed(id: $id){\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articles{\r\n        id\r\n        title\r\n        description\r\n        content\r\n        url      \r\n    }\r\n  } \r\n}",
								"variables": " {\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles  from all Feeds -  Article Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));   \r",
									"    pm.expect(data.data.feeds[0].articles[0].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.feeds[0].articles[0].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].content).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use it by the way. And it worked!\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.feeds[0].articles[1]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].articles[0]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].articles[1]).to.exist;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articlesFromFeeds{\r\n  feeds{    \r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articles{\r\n        id\r\n        title\r\n        description\r\n        content\r\n        url      \r\n    }\r\n  }  \r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Count All Articles From a Feed - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.articleCount).equal(3)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query countArticlesFromFeed($id: Float!){\r\n  feed(id: $id){\r\n  id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articleCount\r\n  }\r\n}",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Count All Catagories From a Feed - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.categoryCount).equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query countArticlesFromFeed($id: Float!){\r\n  feed(id: $id){\r\n  id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    categoryCount\r\n  }\r\n}",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST  - Create Feed Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You don't have permission for this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Mutation($feed: FeedInput!) {\r\n  createFeed(feed: $feed) {\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"feed\": {\r\n    \"link\": \"https://google.de\",\r\n    \"ttl\": 187,\r\n    \"name\": \"Test Feed\",\r\n    \"description\": \"Description\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST  - Create Feed Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.globals.set(\"new-feed-id\", data.data.createFeed.id);\r",
									"    pm.expect(data.data.createFeed.link).equal(\"https://www.g.de\");\r",
									"    pm.expect(data.data.createFeed.name).equal(\"Test Feed\");\r",
									"    pm.expect(data.data.createFeed.ttl).equal(\"187\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Mutation($feed: FeedInput!) {\r\n  createFeed(feed: $feed) {\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"feed\": {\r\n    \"link\": \"https://www.g.de\",\r\n    \"ttl\": 187,\r\n    \"name\": \"Test Feed\",\r\n    \"description\": \"Description\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST  - Create Feed Invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Variable \\\"$feed\\\" got invalid value \\\"187.de\\\" at \\\"feed.link\\\"; Query error: Not a valid URL\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation Mutation($feed: FeedInput!) {\r\n  createFeed(feed: $feed) {\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"feed\": {\r\n    \"link\": \"187.de\",\r\n    \"ttl\": 187,\r\n    \"name\": \"Test Feed\",\r\n    \"description\": \"Description\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  - Delete Feed as User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You don't have permission for this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\r\nmutation Mutation($feedId: Float!) {\r\n  deleteFeed(feedId: $feedId)\r\n}",
								"variables": "{\r\n    \"feedId\": 10\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  - Delete Feed as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"     pm.expect(data.data.deleteFeed).equal(\"Feed with the id \" + pm.globals.get(\"new-feed-id\") + \" was deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.name != 'LOCAL') {\r",
									"    const postRequest = {\r",
									"        url: pm.collectionVariables.get('keycloak-url'),\r",
									"        method: 'POST',\r",
									"        header: [\r",
									"            'Content-Type:application/x-www-form-urlencoded',\r",
									"        ],\r",
									"        body: {\r",
									"            mode: 'urlencoded',\r",
									"            urlencoded: [\r",
									"                {key: \"grant_type\", value: \"password\", disabled: false},\r",
									"                {key: \"client_id\", value: \"core-service\", disabled: false},\r",
									"                {key: \"username\", value: pm.environment.get(\"keycloak-test-admin-name\"), disabled: false},\r",
									"                {key: \"password\", value: pm.environment.get(\"keycloak-test-admin-pw\"), disabled: false},\r",
									"            ]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    let tokeRequest = true;\r",
									"\r",
									"    // Check if the current token is expired\r",
									"    if (pm.environment.name != pm.collectionVariables.get('adminadminTokenEnvironment')) {\r",
									"        console.log(\"env change -> New Token required!\");\r",
									"    } else if (!pm.collectionVariables.get('keycloakAdminAccessToken')) {\r",
									"        console.log('Token is missing!');\r",
									"    } else if (pm.collectionVariables.get('adminTokenExpiry') <= (new Date().getTime())) {\r",
									"        console.log('Token is expired!');\r",
									"    } else {\r",
									"        tokeRequest = false;\r",
									"        console.log('Token is still valid!');\r",
									"    }\r",
									"\r",
									"\r",
									"// Request a new token\r",
									"    if (tokeRequest === true) {\r",
									"        pm.sendRequest(postRequest, function (err, res) {\r",
									"            if (res.code === 404) {\r",
									"                console.log('Keycloak Credentials not configured!');\r",
									"            } else {\r",
									"                console.log(err ? err : res.json());\r",
									"                if (err === null) {\r",
									"                    let responseJson = res.json();\r",
									"                    pm.collectionVariables.set('keycloakAdminAccessToken', responseJson.access_token);\r",
									"\r",
									"                    // Save the expiry date\r",
									"                    let expiryDate = new Date();\r",
									"                    expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);\r",
									"                    pm.collectionVariables.set('adminTokenExpiry', expiryDate.getTime());\r",
									"                    pm.collectionVariables.set('adminTokenEnvironment', pm.environment.name);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{keycloakAdminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\r\nmutation Mutation($feedId: Float!) {\r\n  deleteFeed(feedId: $feedId)\r\n}",
								"variables": "{\r\n    \"feedId\": {{new-feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "GET - Recommended Articles - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(1);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[3].id).equal(5);\r",
									"    pm.expect(data.data.recommendedArticles[4].id).equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Articles  Pagination - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:1, PaginationArg: {skip:1, take:3}){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Articles - Seed 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(1);\r",
									"    pm.expect(data.data.recommendedArticles[3].id).equal(3);\r",
									"    pm.expect(data.data.recommendedArticles[4].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:2){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Feeds - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedFeeds[0].id).equal(1);\r",
									"    pm.expect(data.data.recommendedFeeds[1].id).equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedFeeds(seed:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Feeds - Seed 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedFeeds[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedFeeds[1].id).equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedFeeds(seed:3){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Similar Articles",
			"item": [
				{
					"name": "Similar Articles - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(1);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[3].id).equal(5);\r",
									"    pm.expect(data.data.similarArticles[4].id).equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleId:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Similar Articles  Pagination - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleId:1, PaginationArg: {skip:1, take:3}){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Similar Articles - Seed 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(1);\r",
									"    pm.expect(data.data.similarArticles[3].id).equal(3);\r",
									"    pm.expect(data.data.similarArticles[4].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleId:2){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User-Info",
			"item": [
				{
					"name": "GET - Keycloak User Information - No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You need to be authorized to perform this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query userInfo {\r\n    user {\r\n        id\r\n        username\r\n        firstName\r\n        lastName\r\n        email\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Keycloak User Information - Wrong Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You need to be authorized to perform this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJqM1NBUmkzNTczckpNSTEzTmFOdklJUjZXTG9jQlliZkQwSkVmUW9yUF80In0.eyJleHAiOjE2NTAwMzc5NDEsImlhdCI6MTY1MDAzNzY0MSwianRpIjoiYmZiYjY5Y2MtZWVlMC00YmVmLThiZTktMGVjNjBhMTJiNDcyIiwiaXNzIjoiaHR0cHM6Ly9rZXljbG9hay5za2lvc2EuZGUvYXV0aC9yZWFsbXMvU2tpb3NhLXRlc3QiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiY2M5ZGU3ZWEtMzE3Mi00MjBjLWE1MGItZTA4MmY2YzdhN2JmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiY29yZS1zZXJ2aWNlIiwic2Vzc2lvbl9zdGF0ZSI6ImMxOGUzMTY0LWI3NmUtNDhjMS1iOGJlLTBkY2YwNTI5MGJlNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cDovL2xvY2FsaG9zdDo4MDgwIiwiaHR0cHM6Ly9hcGkuc2tpb3NhLmRlIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXRlc3QiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwic2lkIjoiYzE4ZTMxNjQtYjc2ZS00OGMxLWI4YmUtMGRjZjA1MjkwYmU1IiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiVGVzdCBVc2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoidGVzdC11c2VyIiwiZ2l2ZW5fbmFtZSI6IlRlc3QiLCJmYW1pbHlfbmFtZSI6IlVzZXIiLCJlbWFpbCI6InRlc3RAdGVzdC5kZSJ9.EtoWMY2Uz88d2UQQlGNW6lMEuOKrQqAodaKkppbB6ROXH_LzDWtUEvcspZmrotcbG4Jq49YE4UcgXTh3f9dERn0yOaTvgWSoiEZ7_WekiQL56nrekfFGRND-oCcswmU0y61eIelVD7Svrpt7zE_33S8TPQChqVogzqxRsDWC5ekAScqLyanGu9obSyYD8IJwSsQlssjiJhjBWLPcC7k0idarXkvIS7aFxmkYzGyrM2lpWhs-IRJZXP2MBADR63aiu2xhIzXfWvbfjajG_LSVa9CWGBg38CrQ6yzgk1vcXP7aJmuetIgij1BAU5n4hnKMOdhTmBtNh1oI2GcsLVep7g",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query userInfo {\r\n    user {\r\n        id\r\n        username\r\n        firstName\r\n        lastName\r\n        email\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Keycloak User Information - Correct Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.user.id).equal(\"cc9de7ea-3172-420c-a50b-e082f6c7a7bf\");\r",
									"    pm.expect(data.data.user.username).equal(\"test-user\");\r",
									"    pm.expect(data.data.user.firstName).equal(\"Test\");\r",
									"    pm.expect(data.data.user.lastName).equal(\"User\");\r",
									"    pm.expect(data.data.user.email).equal(\"test@test.de\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query userInfo {\r\n    user {\r\n        id\r\n        username\r\n        firstName\r\n        lastName\r\n        email\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "POST - Subscribe User to Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.changeSubscription).equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation subscription {\n    changeSubscription(feedId: 1, isSubscribed: true)\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Subscriptions of current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.subscriptions.filter(x => x.id === 1).length).equal(1)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query subscription {\n    subscriptions {\n        id,\n        name\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Articles of all Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.articlesOfSubscriptions.filter(x => x.id === 1).length).equal(1)",
									"    pm.expect(data.data.articlesOfSubscriptions.filter(x => x.id === 3).length).equal(1)",
									"    pm.expect(data.data.articlesOfSubscriptions.filter(x => x.id === 5).length).equal(1)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query subscription {\n    articlesOfSubscriptions(PaginationArg: {skip:0, take:3}) {\n        id,\n        title,\n        description,\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Unsubscribe User from Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Correct Data\", function () {",
									"    pm.expect(data.data.changeSubscription).equal(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation subscription {\n    changeSubscription(feedId: 1, isSubscribed: false)\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookmarks",
			"item": [
				{
					"name": "POST - Add Article to Users Bookmarks - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.addBookmark).equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookmark {\r\n    addBookmark(articleId: 1)\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Add Article to Users Bookmarks - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You don't have permission for this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookmark {\r\n    addBookmark(articleId: 1)\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Articles of Users Bookmarks - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.bookmarks[0].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.bookmarks[0].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.bookmarks[0].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookmark {\r\n    bookmarks(PaginationArg: {skip:0, take:4}){\r\n        id\r\n        title\r\n        description\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Articles of Users Bookmarks - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.errors[0].message).equal(\"Access denied! You don't have permission for this action!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookmark {\r\n    bookmarks(PaginationArg: {skip:0, take:4}){\r\n        id\r\n        title\r\n        description\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Bookmark Status of Article - Authorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.bookmarkCount).greaterThan(0);\r",
									"    pm.expect(data.data.article.bookmarkStatus).equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookmarkStatus {\r\n\r\n    article(id: 1) {\r\n        id\r\n        title\r\n        bookmarkCount\r\n        bookmarkStatus\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Bookmark Status of Article - Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.article.bookmarkCount).greaterThan(0);\r",
									"    pm.expect(data.data.article.bookmarkStatus).equal(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query bookmarkStatus {\r\n\r\n    article(id: 1) {\r\n        id\r\n        title\r\n        bookmarkCount\r\n        bookmarkStatus\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Delete Article of Users Bookmarks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.deleteBookmark).equal(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation bookmark {\r\n    deleteBookmark(articleId: 1)\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{keycloakAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.name != 'LOCAL') {",
					"    const postRequest = {",
					"        url: pm.collectionVariables.get('keycloak-url'),",
					"        method: 'POST',",
					"        header: [",
					"            'Content-Type:application/x-www-form-urlencoded',",
					"        ],",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                {key: \"grant_type\", value: \"password\", disabled: false},",
					"                {key: \"client_id\", value: \"core-service\", disabled: false},",
					"                {key: \"username\", value: pm.environment.get(\"keycloak-test-user-name\"), disabled: false},",
					"                {key: \"password\", value: pm.environment.get(\"keycloak-test-user-pw\"), disabled: false},",
					"            ]",
					"        }",
					"    };",
					"",
					"    let tokeRequest = true;",
					"",
					"    // Check if the current token is expired",
					"    if (pm.environment.name != pm.collectionVariables.get('tokenEnvironment')) {",
					"        console.log(\"env change -> New Token required!\");",
					"    } else if (!pm.collectionVariables.get('keycloakAccessToken')) {",
					"        console.log('Token is missing!');",
					"    } else if (pm.collectionVariables.get('tokenExpiry') <= (new Date().getTime())) {",
					"        console.log('Token is expired!');",
					"    } else {",
					"        tokeRequest = false;",
					"        console.log('Token is still valid!');",
					"    }",
					"",
					"",
					"// Request a new token",
					"    if (tokeRequest === true) {",
					"        pm.sendRequest(postRequest, function (err, res) {",
					"            if (res.code === 404) {",
					"                console.log('Keycloak Credentials not configured!');",
					"            } else {",
					"                console.log(err ? err : res.json());",
					"                if (err === null) {",
					"                    let responseJson = res.json();",
					"                    pm.collectionVariables.set('keycloakAccessToken', responseJson.access_token);",
					"",
					"                    // Save the expiry date",
					"                    let expiryDate = new Date();",
					"                    expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"                    pm.collectionVariables.set('tokenExpiry', expiryDate.getTime());",
					"                    pm.collectionVariables.set('tokenEnvironment', pm.environment.name);",
					"                }",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "keycloak-url",
			"value": "https://keycloak.skiosa.de/auth/realms/Skiosa-test/protocol/openid-connect/token",
			"type": "string"
		},
		{
			"key": "tokenEnvironment",
			"value": "",
			"type": "string"
		},
		{
			"key": "keycloakAccessToken",
			"value": ""
		},
		{
			"key": "tokenExpiry",
			"value": ""
		},
		{
			"key": "keycloakAdminAccessToken",
			"value": ""
		},
		{
			"key": "adminTokenExpiry",
			"value": ""
		},
		{
			"key": "adminTokenEnvironment",
			"value": ""
		}
	]
}