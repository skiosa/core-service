{
	"info": {
		"_postman_id": "abed1b2a-842f-4a72-b340-9d1f23ea3170",
		"name": "Skiosa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic Information",
			"item": [
				{
					"name": "Landing Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.message).equal(\"Welcome to the Skiosa Core-Service!\");\r",
									"    pm.expect(data.status).equal(\"/status\");\r",
									"    pm.expect(data.git).equal(\"https://github.com/skiosa/core-service\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-url}}",
							"host": [
								"{{api-url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Response\", function () {\r",
									"    pm.expect(data.message).equal(\"no endpoint found\");\r",
									"    pm.expect(data.status).equal(\"404\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api-url}}/abc",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"abc"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Article",
			"item": [
				{
					"name": "GET  - All Articles - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"\r",
									"    pm.expect(data.data.getArticles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  getArticles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url    \r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Author Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticles[id_array].author).to.exist;\r",
									"\r",
									"    pm.expect(data.data.getArticles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  getArticles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    author {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticles[id_array].categories).to.exist;\r",
									"\r",
									"    pm.expect(data.data.getArticles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  getArticles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticles[id_array].feed).to.exist;\r",
									"\r",
									"    pm.expect(data.data.getArticles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  getArticles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles - All Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"article-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticles[id_array].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticles[id_array].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticles[id_array].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticles[id_array].content).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticles[id_array].author).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].categories).to.exist;\r",
									"    pm.expect(data.data.getArticles[id_array].feed).to.exist;\r",
									"\r",
									"    pm.expect(data.data.getArticles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articles{\r\n  getArticles{\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    author {\r\n        id\r\n        name\r\n    }\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n        feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticle.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticle.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticle.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticle.content).to.exist;\r",
									"    pm.expect(data.data.getArticle.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  getArticle(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Author Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticle.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticle.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticle.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticle.content).to.exist;\r",
									"    pm.expect(data.data.getArticle.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticle.author).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  getArticle(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    author {\r\n      id\r\n      name      \r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticle.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticle.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticle.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticle.content).to.exist;\r",
									"    pm.expect(data.data.getArticle.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticle.categories).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  getArticle(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticle.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticle.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticle.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticle.content).to.exist;\r",
									"    pm.expect(data.data.getArticle.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticle.feed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  getArticle(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Single Article - All Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.getArticle.id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.getArticle.title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.getArticle.description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.getArticle.content).to.exist;\r",
									"    pm.expect(data.data.getArticle.url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.getArticle.author).to.exist;\r",
									"    pm.expect(data.data.getArticle.categories).to.exist;\r",
									"    pm.expect(data.data.getArticle.feed).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query article ($id: Float!){\r\n  getArticle(id: $id){\r\n    id\r\n    title\r\n    description\r\n    content\r\n    url\r\n    author {\r\n        id\r\n        name\r\n    }\r\n    categories {\r\n        id\r\n        name\r\n    }\r\n    feed {\r\n        id\r\n        name\r\n        link\r\n        ttl\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{article-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feed",
			"item": [
				{
					"name": "GET  - Single Feed - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.link).equal(\"https://asciiflix.de\");\r",
									"    pm.expect(data.data.feed.ttl).equal(\"3600\");\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.description).equal(\" A cheap and data-saving YouTube alternative for poor People with Bad Internet Connections\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feed ($id: Float!){ \r\n  feed(id: $id){\r\n      id\r\n      link\r\n      ttl\r\n      name\r\n      description\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Feeds - Basic Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feeds[id_array].link).equal(\"https://asciiflix.de\");\r",
									"    pm.expect(data.data.feeds[id_array].ttl).equal(\"3600\");\r",
									"    pm.expect(data.data.feeds[id_array].name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feeds[id_array].description).equal(\" A cheap and data-saving YouTube alternative for poor People with Bad Internet Connections\");\r",
									"\r",
									"    pm.expect(data.data.feeds[1]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feeds{\r\n  feeds{\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description            \r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Catagories from single Feed - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.categories[0].id).equal(2);\r",
									"    pm.expect(data.data.feed.categories[0].name).equal(\"Technology\");\r",
									"    pm.expect(data.data.feed.categories[1]).to.exist;\r",
									"    pm.expect(data.data.feed.categories[0]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query feed ($id: Float!){ \r\n  feed(id: $id){\r\n      id\r\n      link\r\n      ttl\r\n      name\r\n      description\r\n      categories{\r\n        id\r\n        name\r\n      }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Catagories from all Feed - Category Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feeds[0].categories[0].id).equal(2);\r",
									"    pm.expect(data.data.feeds[0].categories[0].name).equal(\"Technology\");\r",
									"    pm.expect(data.data.feeds[0].categories[1]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].categories[0]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].categories[1]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query categoriesFromFeed{\r\n  feeds{\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    categories{\r\n        id\r\n        name\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles  from single Feed -  Article Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.articles[0].id).equal(1);\r",
									"    pm.expect(data.data.feed.articles[0].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.feed.articles[0].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.feed.articles[0].content).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use it by the way. And it worked!\");\r",
									"    pm.expect(data.data.feed.articles[0].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.feed.articles[1]).to.exist;\r",
									"    pm.expect(data.data.feed.articles[2]).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articlesFromFeed ($id: Float!){ \r\n  feed(id: $id){\r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articles{\r\n        id\r\n        title\r\n        description\r\n        content\r\n        url      \r\n    }\r\n  } \r\n}",
								"variables": " {\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - All Articles  from all Feeds -  Article Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"var id_array = pm.environment.get(\"feed-id\") - 1;\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feeds[id_array].id).equal(parseInt(pm.environment.get(\"feed-id\")));   \r",
									"    pm.expect(data.data.feeds[0].articles[0].id).equal(parseInt(pm.environment.get(\"article-id\")));\r",
									"    pm.expect(data.data.feeds[0].articles[0].title).equal(\"How installing linux made me gain 20lbs of muscle\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].description).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use...\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].content).equal(\"After installing arch linux, I did one pushup every time I told someone, that I use it by the way. And it worked!\");\r",
									"    pm.expect(data.data.feeds[0].articles[0].url).equal(\"https://asciiflix.de/watch/814bd1ab-18a7-41f2-8b23-7feb2bab9de2\");\r",
									"    pm.expect(data.data.feeds[0].articles[1]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].articles[0]).to.exist;\r",
									"    pm.expect(data.data.feeds[1].articles[1]).to.exist;\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query articlesFromFeeds{\r\n  feeds{    \r\n    id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articles{\r\n        id\r\n        title\r\n        description\r\n        content\r\n        url      \r\n    }\r\n  }  \r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Count All Articles From a Feed - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.articleCount).equal(3)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query countArticlesFromFeed($id: Float!){\r\n  feed(id: $id){\r\n  id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    articleCount\r\n  }\r\n}",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  - Count All Catagories From a Feed - Feed Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.feed.id).equal(parseInt(pm.environment.get(\"feed-id\")));\r",
									"    pm.expect(data.data.feed.name).equal(\"Asciiflix.de\");\r",
									"    pm.expect(data.data.feed.categoryCount).equal(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query countArticlesFromFeed($id: Float!){\r\n  feed(id: $id){\r\n  id\r\n    link\r\n    ttl\r\n    name\r\n    description\r\n    categoryCount\r\n  }\r\n}",
								"variables": "{\r\n    \"id\": {{feed-id}}\r\n}"
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "GET - Recommended Articles - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(1);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[3].id).equal(5);\r",
									"    pm.expect(data.data.recommendedArticles[4].id).equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Articles  Pagination - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:1, PaginationArg: {skip:1, take:3}){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Articles - Seed 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.recommendedArticles[2].id).equal(1);\r",
									"    pm.expect(data.data.recommendedArticles[3].id).equal(3);\r",
									"    pm.expect(data.data.recommendedArticles[4].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedArticles(seed:2){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Feeds - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedFeeds[0].id).equal(1);\r",
									"    pm.expect(data.data.recommendedFeeds[1].id).equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedFeeds(seed:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Recommended Feeds - Seed 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.recommendedFeeds[0].id).equal(2);\r",
									"    pm.expect(data.data.recommendedFeeds[1].id).equal(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  recommendedFeeds(seed:3){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Similar Articles",
			"item": [
				{
					"name": "Similar Articles - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(1);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[3].id).equal(5);\r",
									"    pm.expect(data.data.similarArticles[4].id).equal(3);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleID:1){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Similar Articles  Pagination - Seed 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleID:1, PaginationArg: {skip:1, take:3}){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Similar Articles - Seed 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Correct Data\", function () {\r",
									"    pm.expect(data.data.similarArticles[0].id).equal(2);\r",
									"    pm.expect(data.data.similarArticles[1].id).equal(4);\r",
									"    pm.expect(data.data.similarArticles[2].id).equal(1);\r",
									"    pm.expect(data.data.similarArticles[3].id).equal(3);\r",
									"    pm.expect(data.data.similarArticles[4].id).equal(5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  similarArticles(articleID:2){\r\n    id\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{api-url}}/graphql",
							"host": [
								"{{api-url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}