---
# Default Pipeline
kind: pipeline
type: kubernetes
name: basic-pipeline

steps:
- name: npm setup
  image: node
  commands:
  - npm install

- name: unit tests
  image: node
  commands:
  - npm run test

- name: branch specific code-analysis
  image: node
  environment:
    token:
      from_secret: sonar_token
  commands:
  - npm install sonarqube-scanner -g
  - sonar-scanner -Dsonar.branch.name=$${DRONE_TARGET_BRANCH} -Dsonar.login=$token

image_pull_secrets:
- dockerconfig

trigger:
  branch:
    exclude:
      - master
  event:
  - push

---
# PR Pipeline
kind: pipeline
type: kubernetes
name: pre-build-pipeline

steps:
- name: npm setup
  image: node
  commands:
  - npm install

- name: unit tests
  image: node
  commands:
  - npm run test

- name: code-analysis & coverage
  image: node
  environment:
    token:
      from_secret: sonar_token
  commands:
  - npm install sonarqube-scanner -g
  - sonar-scanner -Dsonar.pullrequest.key=$${DRONE_PULL_REQUEST} -Dsonar.pullrequest.branch=$${DRONE_SOURCE_BRANCH} -Dsonar.pullrequest.base=$${DRONE_TARGET_BRANCH} -Dsonar.scm.disabled=true -Dsonar.login=$token

image_pull_secrets:
- dockerconfig

trigger:
  event:
  - pull_request

---
# Master Pipeline
kind: pipeline
type: kubernetes
name: final-build-pipeline

steps:

- name: npm setup
  image: node
  commands:
  - npm install

- name: unit tests
  image: node
  commands:
  - npm run test

- name: docker-build
  image: plugins/docker
  settings:
    registry: registry.dev.skiosa.de
    repo: registry.dev.skiosa.de/core-service
    tags: [ latest, "${DRONE_COMMIT_SHA:0:7}" ]
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password

- name: promote-deployment
  image: danihodovic/drone-promote
  settings:
    drone_token:
      from_secret: drone_token
    target: production

- name: master code-analysis
  image: node
  environment:
    token:
      from_secret: sonar_token
  commands:
  - npm install sonarqube-scanner -g
  - sonar-scanner -Dsonar.branch.name=master -Dsonar.login=$token

trigger:
  branch:
  - master
  event:
  - push

---
#CD Pipeline
kind: pipeline
type: kubernetes
name: deployment-pipeline

steps:
  - name: deployment-update
    image: ubuntu
    environment:
      SSH_KEY:
        from_secret: ssh_key
      dockerImage: core-service
      directory: core-service
      dockerImageVersion: ${DRONE_COMMIT_SHA:0:7}
    commands:
    - apt update
    - apt install -y git
    - mkdir -p /root/.ssh
    - echo -n "$SSH_KEY" > /root/.ssh/id_ed25519
    - chmod 600 /root/.ssh/id_ed25519
    - ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts
    - eval "$(ssh-agent -s)"
    - ssh-add /root/.ssh/id_ed25519
    - git clone git@github.com:skiosa/deployments.git
    - cd deployments
    - git checkout master
    - ./update.sh $dockerImage $directory $dockerImageVersion
    - git add .
    - git commit -m "updated image version"
    - git push origin master

trigger:
  event:
    - promote
  target:
    - production
